node {
   //def artServer = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
  def artServer = Artifactory.server('artiha-demo')
  artServer.credentialsId='art-docker-ci'
  def buildInfo = Artifactory.newBuildInfo()
  stage 'Checkout MAVEN'
  git url: 'git@gitlab.com:yongqiang/project-examples.git'
  
  stage 'Build Maven'
  def rtMaven = Artifactory.newMavenBuild()
  
  rtMaven.resolver server: artServer, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
  rtMaven.deployer server: artServer, releaseRepo: 'libs-snapshot-local', snapshotRepo: 'libs-snapshot-local'
  rtMaven.tool = 'maven'
   rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean install', buildInfo: buildInfo
   // Mark the code checkout 'stage'....
   stage('Checkout Docker') {
   // Get some code from a GitHub repository
   git url: 'git@gitlab.com:yongqiang/docker-lifecycle-scripts.git'
   }
   //def artServer = Artifactory.server('jfrogtraining')
   //def buildInfo = Artifactory.newBuildInfo()
  buildInfo.env.capture = true
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'art-docker-ci',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
 sh 'echo credentials applied'
 def curlstr="curl -u"+uname+':'+pw+" 'http://beijing.artifactory.com/artifactory/"
dir('docker-app') {
   stage('Resolve') {
       def warverstr=curlstr+ "api/search/latestVersion?g=org.jfrog.test&a=multi3&repos=libs-snapshot-local'"
       sh warverstr +' > war/version.txt'
       env.WARVER=readFile('war/version.txt')
        def downloadSpec = """{
 "files": [
  {
   "pattern": "libs-snapshot-local/org/jfrog/test/multi3/"""+env.WARVER+"""/*.war",
   "target": "war/webservice.war",
   "flat":"true"
  }
  ]
}"""
    println(downloadSpec)
    artServer.download(downloadSpec, buildInfo)
   }
   stage('Build and Deploy') {
        def tagName='beijing.artifactory.com:5002/docker-app:'+env.BUILD_NUMBER
        docker.build(tagName)
        def artDocker= Artifactory.docker(uname, pw)
        //artDocker.push(tagName, 'docker-dev-local2', buildInfo)
        sh 'docker push ' + tagName
        def tagName2='beijing.artifactory.com:5001/docker-app:'+env.BUILD_NUMBER
        sh 'docker tag ' + tagName + ' ' + tagName2
        sh 'docker push ' + tagName2
        artServer.publishBuildInfo(buildInfo)
        //sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
        //sh 'cat retag_out.json'
        //def retagstr=curlstr+"api/docker/docker-dev-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
        //sh retagstr
   }
}
}
}
node {
    git url: 'git@gitlab.com:yongqiang/docker-lifecycle-scripts.git'
    def artServer = Artifactory.server('artiha-demo')
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'art-docker-ci',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
        def artDocker= Artifactory.docker(uname, pw)
def curlstr="curl -u"+uname+':'+pw+" 'http://beijing.artifactory.com/artifactory/"
    dir('docker-app/app-test') {
        stage('testing app') {
            def imageName='beijing.artifactory.com:5002/docker-app'+':'+env.BUILD_NUMBER
            sh 'docker images | grep docker-app'
            println(imageName)
            //sh 'docker rmi '+imageName+' || true'
            //artDocker.pull(imageName)
            //docker.withRegistry('https://jfrogtraining-docker-dev.jfrog.io/', 'art-docker-ci') {
                docker.image(imageName).withRun('-p 8181:8181') {c ->
                    sleep 5
                    sh 'curl "http://localhost:8181/swampup/"'
                }
            //}
        }
        stage('Staging') {
            def promotionConfig1 = [
                // Mandatory parameters
                'buildName'          : $BUILD_NAME,
                'buildNumber'        : $BUILD_NUMBER,
                'targetRepo'         : 'libs-stage-local',
        
                // Optional parameters
                'comment'            : 'custom stage 1',
                'sourceRepo'         : 'libs-snapshot-local',
                'status'             : 'custom-stage1',
                'includeDependencies': false,
                'copy'               : true,
                // 'failFast' is true by default.
                // Set it to false, if you don't want the promotion to abort upon receiving the first error.
                'failFast'           : true
            ]
            def promotionConfig2 = [
                // Mandatory parameters
                'buildName'          : $BUILD_NAME,
                'buildNumber'        : $BUILD_NUMBER,
                'targetRepo'         : 'libs-stage-local',
        
                // Optional parameters
                'comment'            : 'custom stage 1',
                'sourceRepo'         : 'libs-snapshot-local',
                'status'             : 'custom-stage1',
                'includeDependencies': false,
                'copy'               : true,
                // 'failFast' is true by default.
                // Set it to false, if you don't want the promotion to abort upon receiving the first error.
                'failFast'           : true
            ]

            // Promote build
            artServer.promote promotionConfig1
            artServer.promote promotionConfig2
           
        }
        stage('Promotions') {
            def promotestr=curlstr+"api/build/promote/$JOB_NAME/$BUILD_NUMBER' -X POST -H 'Content-Type: application/vnd.org.jfrog.artifactory.build.PromotionRequest+json' "
            def dockerstr=promotestr + "-T promote-docker.json"
            def warstr=promotestr + "-T promote-war.json"
            sh 'cat promote-docker.json'
            println(dockerstr)
            sh dockerstr
            sh 'cat promote-war.json'
            sh warstr
            // Promote build
            sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
            sh 'cat retag_out.json'
            def retagstr=curlstr+"api/docker/docker-release-local2/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
            sh retagstr
            //println(env.WARVER)
            }
            stage('distribute')
            {
              def distribStr=curlstr+'api/build/distribute/'+env.JOB_NAME+'/'+env.BUILD_NUMBER+"' -X POST -H 'Content-Type: application/json' "
              def dockerDistrib = distribStr+ "-T distributeDocker.json"
              println(dockerDistrib)
              sh dockerDistrib
              def warDistrib = distribStr+"-T distributeWar.json"
              sh warDistrib
            }
        }
    }
}
